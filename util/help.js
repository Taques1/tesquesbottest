const { Client, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, IntentsBitField } = require('discord.js');
const config = require("../config.json");
const emotes = require("../emotes.json");

module.exports = {
  name: 'comandos',
  description: 'Mostra comandos do bot com navega√ß√£o por bot√µes.',
  async execute(client, message, args) {

    // Cria√ß√£o do embed inicial
    const initialEmbed = new EmbedBuilder()
      .setColor('#000000') // Preto
      .setAuthor({ name: 'Taques Bot', iconURL: client.user.displayAvatarURL() })
      .setTitle('Oi, eu sou o Taques Bot! Espero que goste de mim.')
      .setDescription('**Reaja de acordo com o que procura!**\n\n‚öôÔ∏è - Administra√ß√£o\nüìö - Gerais\nüéâ - Divers√£o\nüñºÔ∏è - Imagem\nüí∞ - Economia')
      .setImage('https://i.imgur.com/jaaYyNK.png')
      .setFooter({ text: `Comando solicitado por ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) })
      .setTimestamp();

    // Cria√ß√£o dos bot√µes
    const buttons = [
      new ButtonBuilder()
        .setCustomId('admin')
        .setLabel('‚öôÔ∏è')
        .setStyle(ButtonStyle.Primary),

      new ButtonBuilder()
        .setCustomId('gerais')
        .setLabel('üìö')
        .setStyle(ButtonStyle.Primary),

      new ButtonBuilder()
        .setCustomId('diversao')
        .setLabel('üéâ')
        .setStyle(ButtonStyle.Primary),

      new ButtonBuilder()
        .setCustomId('imagem')
        .setLabel('üñºÔ∏è')
        .setStyle(ButtonStyle.Primary),

      new ButtonBuilder()
        .setCustomId('economia')
        .setLabel('üí∞')
        .setStyle(ButtonStyle.Primary),

      new ButtonBuilder()
        .setCustomId('voltar')
        .setLabel('Voltar')
        .setEmoji('üîô')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(true) // Desabilitado no in√≠cio
    ];

    // Divis√£o dos bot√µes em linhas (m√°ximo 5 por linha)
    const row = new ActionRowBuilder().addComponents(buttons.slice(0, 5));
    const row2 = new ActionRowBuilder().addComponents(buttons.slice(5));

    // Envio da mensagem inicial com os bot√µes
    const sentMessage = await message.channel.send({ embeds: [initialEmbed], components: [row, row2] });

    // Filtro para coletar intera√ß√µes apenas do autor da mensagem original
    const filter = (interaction) => interaction.user.id === message.author.id;

    // Cria√ß√£o do coletor de intera√ß√µes
    const collector = sentMessage.createMessageComponentCollector({ filter, time: 600000 }); // 10 minutos

    collector.on('collect', async (interaction) => {
      // Previne qualquer intera√ß√£o de outros usu√°rios
      await interaction.deferUpdate();

      let embedResponse;

      switch (interaction.customId) {
        case 'admin':
          embedResponse = new EmbedBuilder()
            .setColor('#5865F2') // Azul Discord
            .setTitle('‚öôÔ∏è Comandos de Administra√ß√£o')
            .setDescription(`
**!tban** <@user> - Bana um usu√°rio do servidor.
**!tlistban** - Lista de pessoas e bots banidos.
**!tkick** <@user> <motivo> - Expulse o usu√°rio do servidor.
**!tclear** <1 a 100> - Exclua mensagens do canal.
**!tnuke** - Exclui todas as mensagens do canal.
**!twarn** <@user> <motivo> - Avisa o usu√°rio.
**!tunwarn** <@user> - Remove os avisos do membro.
**!tlock** - Bloqueia o canal.
**!tunlock** - Desbloqueia o canal bloqueado.
**!tenquete** <mensagem> - Cria uma enquete.
**!tsorteio** <tempo> <canal> <pr√™mio> - Inicia um sorteio.
            `)
            .setFooter({ text: `Comandos de Administra√ß√£o | Solicitado por ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) })
            .setTimestamp();
          break;

        case 'gerais':
          embedResponse = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle('üìö Comandos Gerais')
            .setDescription(`
**!tavatar** - Mostra seu avatar.
**!tclima** <cidade> - Veja a previs√£o do tempo.
**!tservericon** - Mostra a imagem do servidor.
**!tbotinfo** - Veja as minhas informa√ß√µes.
**!tuserinfo** - Veja as informa√ß√µes de um membro.
**!tserverinfo** - Veja as informa√ß√µes do servidor.
**!tsay** <mensagem> - O bot repetir√° a mensagem.
**!tping** - Ver a lat√™ncia do bot.
**!thelp** - Lista de comandos.
**!tideia** <mensagem> - Envie uma sugest√£o.
**!tuptime** - Veja h√° quanto tempo estou online.
            `)
            .setFooter({ text: `Comandos Gerais | Solicitado por ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) })
            .setTimestamp();
          break;

        case 'diversao':
          embedResponse = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle('üéâ Comandos de Divers√£o')
            .setDescription(`
**!t8ball** <pergunta> - Responde sua pergunta.
**!taplaudir** <@user> - Aplauda um usu√°rio.
**!tcoinflip** - Cara ou coroa?
**!tfaust√£o** - Frases do Faust√£o.
**!tfeed** <@user> - Alimente um usu√°rio.
**!thomo** - Qu√£o gay voc√™ √©?
**!tgoularte** <mensagem> - Fa√ßa o Goularte falar algo.
**!thug** <@user> - Abrace um usu√°rio.
**!tjokempo** <escolha> - Jogue pedra, papel ou tesoura.
**!tkiss** <@user> - Beije um usu√°rio.
**!tpat** <@user> - Fa√ßa carinho em um usu√°rio.
**!tpunch** <@user> - Bata em um usu√°rio.
**!trun** - Corra!
**!tship** <@user> <@user> - Shippe usu√°rios.
**!tshy** - Mostre que est√° t√≠mido.
**!tslap** <@user> - D√™ um tapa em um usu√°rio.
            `)
            .setFooter({ text: `Comandos de Divers√£o | Solicitado por ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) })
            .setTimestamp();
          break;

        case 'imagem':
          embedResponse = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle('üñºÔ∏è Comandos de Imagem')
            .setDescription(`
**!tbeautiful** <@user> - Mostra o qu√£o lindo algu√©m √©.
**!tcmm** <mensagem> - Mude minha ideia.
**!tenfim** <mensagem> - Mostre a hipocrisia.
**!tgay** - Veja o qu√£o gay voc√™ √© em imagens.
**!tlaranjo** <mensagem> - Laranjo repete sua mensagem.
**!tpetpet** <@user> - Fa√ßa carinho em algu√©m.
**!tprimeiraspalavras** <mensagem> - Primeiras palavras do beb√™.
**!tstonks** <@user> - Meme Stonks.
**!ttobecontinued** - Meme "To be continued".
**!ttrigger** - TRIGGERED!
            `)
            .setFooter({ text: `Comandos de Imagem | Solicitado por ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) })
            .setTimestamp();
          break;

        case 'economia':
          embedResponse = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle('üí∞ Comandos de Economia')
            .setDescription(`
**!work** - Trabalhe para ganhar dinheiro.
**!rob** <@user> - Roube dinheiro de algu√©m.
**!bal** - Veja o seu saldo.
**!dep** <quantia> - Deposite dinheiro no banco.
**!wit** <quantia> - Retire dinheiro do banco.
**!pay** <quantia> <@user> - Pague alguem.
**!rank** - Veja o ranking dos mais ricos.
**!inv** - Veja o seu inventario.
**!perfil** - Veja o seu perfil.
**!shop** - Veja o catalogo.
**!buy** <item> - Compre itens com seu dinheiro.
**!collect** - Colete o dinheiro dos seus cargos.
**!rinha** <aposta> - Fa√ßa uma rinha de galos.
**!slot** <aposta> - Jogue na m√°quina ca√ßa-n√≠queis.
**!rr** <aposta> - Jogue Roleta Russa.
**!21** <aposta> - Jogue um blackjack.
**!mines** <aposta> - Jogue um campo minado.
**!pescar** - Pesque peixes.
**!bau** - Abra os seus baus.
**!raspadinha** - Tente a sorte com raspadinhas.
**!roulette** - Jogue na roleta.
**!conquistas** - Veja as suas conquistas.
            `)
            .setFooter({ text: `Comandos de Economia | Solicitado por ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) })
            .setTimestamp();
          break;

        case 'voltar':
          embedResponse = initialEmbed;
          break;

        default:
          embedResponse = initialEmbed;
          break;
      }

      // Habilita o bot√£o "Voltar" ap√≥s a primeira intera√ß√£o
      const updatedButtons = buttons.map(btn => {
        if (btn.data.custom_id === 'voltar') {
          return ButtonBuilder.from(btn).setDisabled(false);
        }
        return btn;
      });

      const updatedRow = new ActionRowBuilder().addComponents(updatedButtons.slice(0, 5));
      const updatedRow2 = new ActionRowBuilder().addComponents(updatedButtons.slice(5));

      await interaction.editReply({ embeds: [embedResponse], components: [updatedRow, updatedRow2] });
    });

    collector.on('end', () => {
      // Desabilita todos os bot√µes ap√≥s o t√©rmino do coletor
      const disabledButtons = buttons.map(btn => ButtonBuilder.from(btn).setDisabled(true));
      const disabledRow = new ActionRowBuilder().addComponents(disabledButtons.slice(0, 5));
      const disabledRow2 = new ActionRowBuilder().addComponents(disabledButtons.slice(5));

      sentMessage.edit({ components: [disabledRow, disabledRow2] }).catch(console.error);
    });
  },
};
