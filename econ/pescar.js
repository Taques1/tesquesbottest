const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const { QuickDB } = require('quick.db');

const db = new QuickDB();

module.exports = {
  name: 'pescar',
  description: 'Pesque um peixe e veja o que voc√™ pegou!',
  execute: async (client, message, args) => {
    const userId = message.author.id;

    // Verifica se o usu√°rio tem uma vara de pesca
    const fishingRod = await db.get(`inventory_${userId}.vara_de_pesca`) || 0;
    if (fishingRod < 1) {
      return message.reply('Voc√™ precisa de uma vara de pesca para pescar. Compre uma na loja!');
    }

    // Verifica se o usu√°rio tem uma isca magn√©tica
    const magneticBait = await db.get(`inventory_${userId}.isca_magnetica`) || 0;

    // Configura√ß√µes do jogo
    const fishTypes = [
      { name: 'üêü Peixe Pequeno', value: 100, chance: 0.6 }, // 60% de chance
      { name: 'üê† Peixe M√©dio', value: 500, chance: 0.3 }, // 30% de chance
      { name: 'üê° Peixe Grande', value: 1000, chance: 0.09 }, // 9% de chance
      { name: 'üêã Peixe Lend√°rio', value: 5000, chance: 0.01 } // 1% de chance
    ];

    // Envia a mensagem inicial com o bot√£o desativado
    const startFishingEmbed = new EmbedBuilder()
      .setTitle('üé£ Pesca!')
      .setDescription('Espere o momento certo e aperte o bot√£o "Pescar" para capturar o peixe!')
      .setColor('#1E90FF');

    const fishButton = new ButtonBuilder()
      .setCustomId('catch_fish')
      .setLabel('Pescar')
      .setStyle(ButtonStyle.Primary)
      .setDisabled(true); // Bot√£o desativado inicialmente

    const row = new ActionRowBuilder().addComponents(fishButton);

    const msg = await message.channel.send({ embeds: [startFishingEmbed], components: [row] });

    // Fun√ß√£o para determinar o resultado da pesca
    const getFishingResult = () => {
      const rand = Math.random();
      let cumulativeChance = 0;
      for (const fish of fishTypes) {
        cumulativeChance += fish.chance;
        if (rand <= cumulativeChance) {
          return fish;
        }
      }
    };

    // Espera um tempo aleat√≥rio entre 2 a 3 segundos e ativa o bot√£o
    const delay = Math.random() * 1000 + 2000; // Entre 2000 e 3000 ms

    setTimeout(async () => {
      fishButton.setDisabled(false); // Ativa o bot√£o
      await msg.edit({ components: [row] });

      // Coleta a intera√ß√£o do bot√£o
      const filter = (interaction) => interaction.customId === 'catch_fish' && interaction.user.id === userId;
      const collector = msg.createMessageComponentCollector({ filter, time: 2000 }); // Tempo m√°ximo para clicar √© 2 segundos

      let fishCaught = false;

      collector.on('collect', async (interaction) => {
        if (!interaction.isButton()) return;

        fishCaught = true;

        const fish = getFishingResult();
        let resultMessage;

        if (fish) {
          // Adiciona o valor ao saldo do usu√°rio
          await db.add(`wallet_${userId}`, fish.value);

          // Remove uma vara de pesca do invent√°rio
          await db.add(`inventory_${userId}.vara_de_pesca`, -1);

          resultMessage = `üéâ Voc√™ pescou um **${fish.name}** e ganhou ${fish.value} moedas!`;

          // Verifica se o peixe √© lend√°rio e concede a conquista
          if (fish.name === 'Peixe Lend√°rio') {
            const hasAchievement = await db.get(`achievements_${userId}.fish_legendary`);
            if (!hasAchievement) {
              await db.set(`achievements_${userId}.fish_legendary`, true);
              resultMessage += `\nüèÜ Parab√©ns! Voc√™ ganhou a conquista **Pesque um Peixe Lend√°rio** pela primeira vez!`;
            }
          }

          // Se o usu√°rio tem uma isca magn√©tica, existe uma chance de pegar um ba√∫
          if (magneticBait > 0) {
            const baitEffectChance = 0.5; // 50% de chance de ativar o efeito da isca
            const baitDurabilityLossChance = 0.3; // 30% de chance de perder a isca

            // Verifica se o efeito da isca ser√° ativado
            if (Math.random() < baitEffectChance) {
              resultMessage += `\n‚ú® Sua **Isca Magn√©tica** brilhou! Voc√™ encontrou algo...`;

              // Chance de receber um ba√∫
              const chestChance = 0.8; // 80% de chance de receber um ba√∫
              if (Math.random() < chestChance) {
                // Simulando a abertura de um ba√∫ diretamente no comando
                const chestTypes = [
                  { name: 'Ba√∫ Comum', value: 100, rarity: 'comum' },
                  { name: 'Ba√∫ Incomum', value: 250, rarity: 'incomum' },
                  { name: 'Ba√∫ Raro', value: 500, rarity: 'raro' },
                  { name: 'Ba√∫ √âpico', value: 1000, rarity: 'epico' },
                  { name: 'Ba√∫ Lend√°rio', value: 10000, rarity: 'lendario' }
                ];
                const chest = chestTypes[Math.floor(Math.random() * chestTypes.length)];
                await db.add(`wallet_${userId}`, chest.value);
                resultMessage += `\nüéÅ Voc√™ encontrou um **${chest.name}** e ganhou ${chest.value} moedas!`;
              } else {
                resultMessage += `\nMas infelizmente era apenas uma pequena ninharia.`;
              }
            }

            // Verifica se a isca se desgasta
            if (Math.random() < baitDurabilityLossChance) {
              await db.add(`inventory_${userId}.isca_magnetica`, -1);
              resultMessage += `\nüíî Sua **Isca Magn√©tica** quebrou ap√≥s esta pesca.`;
            }
          }
        } else {
          resultMessage = '‚ùå Voc√™ n√£o conseguiu pescar nada desta vez. Tente novamente!';
        }

        // Atualiza o embed original com o resultado da pesca
        const resultEmbed = new EmbedBuilder()
          .setAuthor({ name: message.author.tag, iconURL: message.author.displayAvatarURL() })
          .setColor('#1E90FF')
          .setTitle('üé£ Resultado da Pesca')
          .setDescription(resultMessage);

        await interaction.update({ embeds: [resultEmbed], components: [] });
      });

      collector.on('end', async (collected, reason) => {
        if (!fishCaught && reason === 'time') {
          // Se o peixe escapou
          const escapeEmbed = new EmbedBuilder()
            .setTitle('üö® O Peixe Fugiu!')
            .setDescription('O peixe escapou enquanto voc√™ hesitava! Seja mais r√°pido na pr√≥xima vez.')
            .setColor('#FF4500') // Vermelho para alerta
            .setFooter({ text: 'Fique atento da pr√≥xima vez!' });

          await msg.edit({ embeds: [escapeEmbed], components: [] });
        }
      });

    }, delay);
  },
};
